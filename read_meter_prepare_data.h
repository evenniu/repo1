#ifndef __READ_METER_PREPARE_DATA_H__
#define __READ_METER_PREPARE_DATA_H__

#define DEFAULT_SAVE_FL_DATA_COUNT    5

#ifdef __DAY_HOLD_PATCH_COUNT_62__
#define DEFAULT_DAY_HOLD_PATCH_DAY_NUM     62
#elif defined (__DAY_HOLD_PATCH_COUNT_7__)
#define DEFAULT_DAY_HOLD_PATCH_DAY_NUM     7
#else
#define DEFAULT_DAY_HOLD_PATCH_DAY_NUM     3
#endif
#define DEFAULT_DAY_HOLD_PATCH_COUNT       3 //补抄天数？

#if defined __PROVICE_SICHUAN__ || defined __SICHUAN_FK_PATCH_CURVE_DATA__
#define  DEFAULT_CURVE_HOLD_PATCH_DAY_COUNT    3
#else
#define  DEFAULT_CURVE_HOLD_PATCH_DAY_COUNT    1
#endif
//#ifdef __BATCH_TRANSPARENT_METER_TASK_USE_PRIORITY_NODE__
extern PRIORITY_NODE priority_node;
//#endif
#ifdef __BATCH_TRANSPARENT_METER_TASK__
extern INT8U COST_CONTROL_FAIL_FLAG[256];      //__BATCH_TRANSPARENT_METER_TASK_COST_CONTROL__
#endif

#define EDMI_CMD_MOD                1
//#define EDMI_LOGIN                  2
//#define EDMI_READ                   3
//#define EDMI_EXIT                   4

typedef enum
{
    #ifdef __PROVICE_GANSU__//加两个不影响电压表抄读，加多了需要考虑
    READ_MASK_DAY_HOLD_ZXYG_S1C=0,
    READ_MASK_DAY_HOLD_ZXYG_DRLD,
    READ_MASK_DAY_HOLD_ZXYG_DH,
    #else
    #ifdef __COUNTRY_ISRAEL__
    READ_MASK_ISRAEL_DAY_HOLD_ZERO_FH = 0,
    #else
    READ_MASK_DAY_HOLD_ZXYG_DH = 0,
    #endif 
    #endif 
    READ_MASK_DAY_HOLD_ZXYG_HOLD_Z,
//    READ_MASK_DAY_HOLD_ZXYG_HOLD_1,
//    READ_MASK_DAY_HOLD_ZXYG_HOLD_2,
//    READ_MASK_DAY_HOLD_ZXYG_HOLD_3,
//    READ_MASK_DAY_HOLD_ZXYG_HOLD_4,
    READ_MASK_DAY_HOLD_ZXYG_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZXYG_CUR_Z,
    READ_MASK_DAY_HOLD_ZXYG_CUR_1,
    READ_MASK_DAY_HOLD_ZXYG_CUR_2,
    READ_MASK_DAY_HOLD_ZXYG_CUR_3,
    READ_MASK_DAY_HOLD_ZXYG_CUR_4,

    READ_MASK_DAY_HOLD_FXYG_DH,
    READ_MASK_DAY_HOLD_FXYG_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FXYG_CUR_Z,
    READ_MASK_DAY_HOLD_FXYG_CUR_1,
    READ_MASK_DAY_HOLD_FXYG_CUR_2,
    READ_MASK_DAY_HOLD_FXYG_CUR_3,
    READ_MASK_DAY_HOLD_FXYG_CUR_4,

    READ_MASK_DAY_HOLD_ZXWG_DH,
    READ_MASK_DAY_HOLD_ZXWG_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZXWG_CUR_Z,
    READ_MASK_DAY_HOLD_ZXWG_CUR_1,
    READ_MASK_DAY_HOLD_ZXWG_CUR_2,
    READ_MASK_DAY_HOLD_ZXWG_CUR_3,
    READ_MASK_DAY_HOLD_ZXWG_CUR_4,

    READ_MASK_DAY_HOLD_FXWG_DH,
    READ_MASK_DAY_HOLD_FXWG_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FXWG_CUR_Z,
    READ_MASK_DAY_HOLD_FXWG_CUR_1,
    READ_MASK_DAY_HOLD_FXWG_CUR_2,
    READ_MASK_DAY_HOLD_FXWG_CUR_3,
    READ_MASK_DAY_HOLD_FXWG_CUR_4,

    #ifdef __PROVICE_NEIMENG__ 
    READ_MASK_DAY_HOLD_GDCS_BLOCK,
    READ_MASK_DAY_HOLD_GDCS_PREPAY,    
    READ_MASK_DAY_HOLD_SYJE_PREPAY,
    READ_MASK_DAY_HOLD_LJGDJE_PREPAY,
    READ_MASK_DAY_HOLD_SYDL_PREPAY,
    READ_MASK_DAY_HOLD_TZDL_PREPAY,
    READ_MASK_DAY_HOLD_LJGDL_PREPAY,
    READ_MASK_DAY_HOLD_SQMXDL_PREPAY,
    READ_MASK_DAY_HOLD_BJDL_PREPAY,
    READ_MASK_DAY_HOLD_GZDL_PREPAY,
    #endif
    READ_MASK_DAY_HOLD_WG1_DH,
    READ_MASK_DAY_HOLD_WG1_CUR_BLOCK,
    READ_MASK_DAY_HOLD_WG1_CUR_Z,
    READ_MASK_DAY_HOLD_WG1_CUR_1,
    READ_MASK_DAY_HOLD_WG1_CUR_2,
    READ_MASK_DAY_HOLD_WG1_CUR_3,
    READ_MASK_DAY_HOLD_WG1_CUR_4,

    READ_MASK_DAY_HOLD_WG2_DH,
    READ_MASK_DAY_HOLD_WG2_CUR_BLOCK,
    READ_MASK_DAY_HOLD_WG2_CUR_Z,
    READ_MASK_DAY_HOLD_WG2_CUR_1,
    READ_MASK_DAY_HOLD_WG2_CUR_2,
    READ_MASK_DAY_HOLD_WG2_CUR_3,
    READ_MASK_DAY_HOLD_WG2_CUR_4,

    READ_MASK_DAY_HOLD_WG3_DH,
    READ_MASK_DAY_HOLD_WG3_CUR_BLOCK,
    READ_MASK_DAY_HOLD_WG3_CUR_Z,
    READ_MASK_DAY_HOLD_WG3_CUR_1,
    READ_MASK_DAY_HOLD_WG3_CUR_2,
    READ_MASK_DAY_HOLD_WG3_CUR_3,
    READ_MASK_DAY_HOLD_WG3_CUR_4,

    READ_MASK_DAY_HOLD_WG4_DH,
    READ_MASK_DAY_HOLD_WG4_CUR_BLOCK,
    READ_MASK_DAY_HOLD_WG4_CUR_Z,
    READ_MASK_DAY_HOLD_WG4_CUR_1,
    READ_MASK_DAY_HOLD_WG4_CUR_2,
    READ_MASK_DAY_HOLD_WG4_CUR_3,
    READ_MASK_DAY_HOLD_WG4_CUR_4,

    READ_MASK_DAY_HOLD_ZYG_ZDXL_DH,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_07_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_CUR_Z,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_CUR_1,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_CUR_2,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_CUR_3,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_CUR_4,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_TIME_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_TIME_CUR_Z,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_TIME_CUR_1,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_TIME_CUR_2,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_TIME_CUR_3,
    READ_MASK_DAY_HOLD_ZYG_ZDXL_TIME_CUR_4,

    READ_MASK_DAY_HOLD_FYG_ZDXL_DH,
    READ_MASK_DAY_HOLD_FYG_ZDXL_07_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FYG_ZDXL_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FYG_ZDXL_CUR_Z,
    READ_MASK_DAY_HOLD_FYG_ZDXL_CUR_1,
    READ_MASK_DAY_HOLD_FYG_ZDXL_CUR_2,
    READ_MASK_DAY_HOLD_FYG_ZDXL_CUR_3,
    READ_MASK_DAY_HOLD_FYG_ZDXL_CUR_4,
    READ_MASK_DAY_HOLD_FYG_ZDXL_TIME_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FYG_ZDXL_TIME_CUR_Z,
    READ_MASK_DAY_HOLD_FYG_ZDXL_TIME_CUR_1,
    READ_MASK_DAY_HOLD_FYG_ZDXL_TIME_CUR_2,
    READ_MASK_DAY_HOLD_FYG_ZDXL_TIME_CUR_3,
    READ_MASK_DAY_HOLD_FYG_ZDXL_TIME_CUR_4,

    READ_MASK_DAY_HOLD_ZWG_ZDXL_07_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_97_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_97_CUR_Z,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_97_CUR_1,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_97_CUR_2,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_97_CUR_3,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_97_CUR_4,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_TIME_97_CUR_BLOCK,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_TIME_97_CUR_Z,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_TIME_97_CUR_1,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_TIME_97_CUR_2,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_TIME_97_CUR_3,
    READ_MASK_DAY_HOLD_ZWG_ZDXL_TIME_97_CUR_4,

    READ_MASK_DAY_HOLD_FWG_ZDXL_07_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FWG_ZDXL_97_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FWG_ZDXL_97_CUR_Z,
    READ_MASK_DAY_HOLD_FWG_ZDXL_97_CUR_1,
    READ_MASK_DAY_HOLD_FWG_ZDXL_97_CUR_2,
    READ_MASK_DAY_HOLD_FWG_ZDXL_97_CUR_3,
    READ_MASK_DAY_HOLD_FWG_ZDXL_97_CUR_4,
    READ_MASK_DAY_HOLD_FWG_ZDXL_TIME_97_CUR_BLOCK,
    READ_MASK_DAY_HOLD_FWG_ZDXL_TIME_97_CUR_Z,
    READ_MASK_DAY_HOLD_FWG_ZDXL_TIME_97_CUR_1,
    READ_MASK_DAY_HOLD_FWG_ZDXL_TIME_97_CUR_2,
    READ_MASK_DAY_HOLD_FWG_ZDXL_TIME_97_CUR_3,
    READ_MASK_DAY_HOLD_FWG_ZDXL_TIME_97_CUR_4,

    READ_MASK_DAY_HOLD_ZXYG_PARSE_A,
    READ_MASK_DAY_HOLD_ZXYG_PARSE_B,
    READ_MASK_DAY_HOLD_ZXYG_PARSE_C,

    READ_MASK_DAY_HOLD_FXYG_PARSE_A,
    READ_MASK_DAY_HOLD_FXYG_PARSE_B,
    READ_MASK_DAY_HOLD_FXYG_PARSE_C,

    READ_MASK_DAY_HOLD_WG1_PARSE_A,
    READ_MASK_DAY_HOLD_WG1_PARSE_B,
    READ_MASK_DAY_HOLD_WG1_PARSE_C,

    READ_MASK_DAY_HOLD_WG2_PARSE_A,
    READ_MASK_DAY_HOLD_WG2_PARSE_B,
    READ_MASK_DAY_HOLD_WG2_PARSE_C,

#ifndef __PROVICE_NEIMENG__ 
    READ_MASK_DAY_HOLD_GDCS_BLOCK,
    READ_MASK_DAY_HOLD_GDCS_PREPAY,    
    READ_MASK_DAY_HOLD_SYJE_PREPAY,
    READ_MASK_DAY_HOLD_LJGDJE_PREPAY,
    READ_MASK_DAY_HOLD_SYDL_PREPAY,
    READ_MASK_DAY_HOLD_TZDL_PREPAY,
    READ_MASK_DAY_HOLD_LJGDL_PREPAY,
    READ_MASK_DAY_HOLD_SQMXDL_PREPAY,
    READ_MASK_DAY_HOLD_BJDL_PREPAY,
    READ_MASK_DAY_HOLD_GZDL_PREPAY,
#endif

    READ_MASK_DAY_HOLD_DXCS_Z,
    READ_MASK_DAY_HOLD_DXCS_A,
    READ_MASK_DAY_HOLD_DXCS_B,
    READ_MASK_DAY_HOLD_DXCS_C,
    READ_MASK_DAY_HOLD_DXSJ_Z,
    READ_MASK_DAY_HOLD_DXSJ_A,
    READ_MASK_DAY_HOLD_DXSJ_B,
    READ_MASK_DAY_HOLD_DXSJ_C,
    READ_MASK_DAY_HOLD_QSSK_Z,
    READ_MASK_DAY_HOLD_QSSK_A,
    READ_MASK_DAY_HOLD_QSSK_B,
    READ_MASK_DAY_HOLD_QSSK_C,
    READ_MASK_DAY_HOLD_JSSK_Z,
    READ_MASK_DAY_HOLD_JSSK_A,
    READ_MASK_DAY_HOLD_JSSK_B,
    READ_MASK_DAY_HOLD_JSSK_C,//148
    #ifdef __PLC_REC_VOLTMETER1__ //电压表,这个只定义到159，再加大就抄不到了
    READ_MASK_DAY_HOLD_DYHGL_A = 160,
    READ_MASK_DAY_HOLD_DYHGL_B,
    READ_MASK_DAY_HOLD_DYHGL_C,
    READ_MASK_DAY_HOLD_DY_HOUR_HOLD,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_LSB = 164,
    #else
    #ifdef __PROVICE_NEIMENG__
    READ_MASK_DAY_HOLD_ZHYG_BLOCK = 160,
    READ_MASK_DAY_HOLD_ZHYG_Z, 
    READ_MASK_DAY_HOLD_ZHYG_1, 
    READ_MASK_DAY_HOLD_ZHYG_2,
    READ_MASK_DAY_HOLD_ZHYG_3,
    READ_MASK_DAY_HOLD_ZHYG_4,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_LSB = 166,
    #else
    #ifdef __PROVICE_GANSU__
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_LSB=162,//甘肃开始时多两个
    #else
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_LSB=160,//READ_MASK_DAY_HOLD_JSSK_C+12,
    #endif
    #endif//__PROVICE_NEIMENG__
    #endif//__PLC_REC_VOLTMETER1__
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_ZSB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_CJSB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_RSB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_DZSB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_JRLB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_JLLB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_RQB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_DDB,
    READ_MASK_DAY_HOLD_CJT_DQ_LJLL_S1CDJ,

    READ_MASK_DAY_HOLD_METER_TIME_RQ,
    READ_MASK_DAY_HOLD_METER_TIME_SJ,
   // READ_MASK_DAY_HOLD_JZQ_READ_TIME,//此掩码 后续需要去掉 后续再考虑 
    READ_MASK_DAY_HOLD_VOLTAGE_STATE = READ_MASK_DAY_HOLD_METER_TIME_SJ +2,// 江苏使用，剩余电路互感器，上一日电压合格率统计   

 READ_MASK_DAY_HOLD_BREAKER_SYDLZDX_S1R,
    READ_MASK_DAY_HOLD_BREAKER_DLRZDZ_A_S1R ,
    READ_MASK_DAY_HOLD_BREAKER_DLRZDZ_B_S1R,
    READ_MASK_DAY_HOLD_BREAKER_DLRZDZ_C_S1R,

    READ_MASK_DAY_HOLD_BREAKER_SJQLCS,
    READ_MASK_DAY_HOLD_BREAKER_TZCS,
    READ_MASK_DAY_HOLD_BREAKER_TCBHCS,
    READ_MASK_DAY_HOLD_BREAKER_YXSJZLJ,

#ifdef __COUNTRY_ISRAEL__
    READ_MASK_ISRAEL_DAY_HOLD_WATER,
    READ_MASK_ISRAEL_DAY_HOLD_GAS,
    READ_MASK_ISRAEL_DAY_HOLD_APM,
    READ_MASK_SOUTHAFRICA_DAY_HOLD,
    READ_MASK_DAY_HOLD_ZXYG_DH,
#endif
#ifdef __FUJIAN_CURRENT_BREAK__
    READ_MASK_FUJIAN_CURRENT_BREAK_DAY_HOLD_V,
    READ_MASK_FUJIAN_CURRENT_BREAK_DAY_HOLD_REMAIN_I,
    READ_MASK_FUJIAN_CURRENT_BREAK_DAY_HOLD_ZERO_LINE_I,
    READ_MASK_FUJIAN_CURRENT_BREAK_DAY_HOLD_ZERO_ORDER_I,
    READ_MASK_FUJIAN_CURRENT_BREAK_DAY_HOLD_I,

    READ_MASK_FUJIAN_CURRENT_BREAK_DAY_HOLD_TRIP_BLOCK,
    READ_MASK_FUJIAN_CURRENT_BREAK_DAY_HOLD_PROTECTOR_RUN,
#endif
}READ_MASK_DAY_HOLD;

typedef enum READ_MASK_MONTH_HOLD
{   
    READ_MASK_MONTH_HOLD_ZXYG_SYJSR = 0,
    READ_MASK_MONTH_HOLD_ZXYG_SYJSR_Z,
    READ_MASK_MONTH_HOLD_ZXYG_SYJSR_1,
    READ_MASK_MONTH_HOLD_ZXYG_SYJSR_2,
    READ_MASK_MONTH_HOLD_ZXYG_SYJSR_3,
    READ_MASK_MONTH_HOLD_ZXYG_SYJSR_4,
    READ_MASK_MONTH_HOLD_ZXYG_MH,  
    READ_MASK_MONTH_HOLD_ZXYG_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_ZXYG_CUR_Z,
    READ_MASK_MONTH_HOLD_ZXYG_CUR_1,
    READ_MASK_MONTH_HOLD_ZXYG_CUR_2,
    READ_MASK_MONTH_HOLD_ZXYG_CUR_3,
    READ_MASK_MONTH_HOLD_ZXYG_CUR_4,
    #ifdef __SH_2009_METER__
    READ_MASK_MONTH_HOLD_ZXYG_SYJSR_SH,
    #endif
    
    READ_MASK_MONTH_HOLD_FXYG_SYJSR,
    READ_MASK_MONTH_HOLD_FXYG_SYJSR_Z,
    READ_MASK_MONTH_HOLD_FXYG_SYJSR_1,
    READ_MASK_MONTH_HOLD_FXYG_SYJSR_2,
    READ_MASK_MONTH_HOLD_FXYG_SYJSR_3,
    READ_MASK_MONTH_HOLD_FXYG_SYJSR_4,               
    READ_MASK_MONTH_HOLD_FXYG_MH, 
    READ_MASK_MONTH_HOLD_FXYG_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_FXYG_CUR_Z,
    READ_MASK_MONTH_HOLD_FXYG_CUR_1,
    READ_MASK_MONTH_HOLD_FXYG_CUR_2,
    READ_MASK_MONTH_HOLD_FXYG_CUR_3,
    READ_MASK_MONTH_HOLD_FXYG_CUR_4,
    

    READ_MASK_MONTH_HOLD_ZXWG_SYJSR,
    READ_MASK_MONTH_HOLD_ZXWG_SYJSR_Z,
    READ_MASK_MONTH_HOLD_ZXWG_SYJSR_1,
    READ_MASK_MONTH_HOLD_ZXWG_SYJSR_2,
    READ_MASK_MONTH_HOLD_ZXWG_SYJSR_3,
    READ_MASK_MONTH_HOLD_ZXWG_SYJSR_4,                    
    READ_MASK_MONTH_HOLD_ZXWG_MH,
    READ_MASK_MONTH_HOLD_ZXWG_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_ZXWG_CUR_Z,
    READ_MASK_MONTH_HOLD_ZXWG_CUR_1,
    READ_MASK_MONTH_HOLD_ZXWG_CUR_2,
    READ_MASK_MONTH_HOLD_ZXWG_CUR_3,
    READ_MASK_MONTH_HOLD_ZXWG_CUR_4,
    
    READ_MASK_MONTH_HOLD_FXWG_SYJSR,
    READ_MASK_MONTH_HOLD_FXWG_SYJSR_Z,
    READ_MASK_MONTH_HOLD_FXWG_SYJSR_1,
    READ_MASK_MONTH_HOLD_FXWG_SYJSR_2,
    READ_MASK_MONTH_HOLD_FXWG_SYJSR_3,
    READ_MASK_MONTH_HOLD_FXWG_SYJSR_4,                     
    READ_MASK_MONTH_HOLD_FXWG_MH, 
    READ_MASK_MONTH_HOLD_FXWG_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_FXWG_CUR_Z,
    READ_MASK_MONTH_HOLD_FXWG_CUR_1,
    READ_MASK_MONTH_HOLD_FXWG_CUR_2,
    READ_MASK_MONTH_HOLD_FXWG_CUR_3,
    READ_MASK_MONTH_HOLD_FXWG_CUR_4,
    
    READ_MASK_MONTH_HOLD_WG1_SYJSR,
    READ_MASK_MONTH_HOLD_WG1_SYJSR_Z,
    READ_MASK_MONTH_HOLD_WG1_SYJSR_1,
    READ_MASK_MONTH_HOLD_WG1_SYJSR_2,
    READ_MASK_MONTH_HOLD_WG1_SYJSR_3,
    READ_MASK_MONTH_HOLD_WG1_SYJSR_4,                    
    READ_MASK_MONTH_HOLD_WG1_MH, 
    READ_MASK_MONTH_HOLD_WG1_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_WG1_CUR_Z,
    READ_MASK_MONTH_HOLD_WG1_CUR_1,
    READ_MASK_MONTH_HOLD_WG1_CUR_2,
    READ_MASK_MONTH_HOLD_WG1_CUR_3,
    READ_MASK_MONTH_HOLD_WG1_CUR_4,
    
    READ_MASK_MONTH_HOLD_WG2_SYJSR,
    READ_MASK_MONTH_HOLD_WG2_SYJSR_Z,
    READ_MASK_MONTH_HOLD_WG2_SYJSR_1,
    READ_MASK_MONTH_HOLD_WG2_SYJSR_2,
    READ_MASK_MONTH_HOLD_WG2_SYJSR_3,
    READ_MASK_MONTH_HOLD_WG2_SYJSR_4,                     
    READ_MASK_MONTH_HOLD_WG2_MH, 
    READ_MASK_MONTH_HOLD_WG2_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_WG2_CUR_Z,
    READ_MASK_MONTH_HOLD_WG2_CUR_1,
    READ_MASK_MONTH_HOLD_WG2_CUR_2,
    READ_MASK_MONTH_HOLD_WG2_CUR_3,
    READ_MASK_MONTH_HOLD_WG2_CUR_4,
    
    READ_MASK_MONTH_HOLD_WG3_SYJSR,
    READ_MASK_MONTH_HOLD_WG3_SYJSR_Z,
    READ_MASK_MONTH_HOLD_WG3_SYJSR_1,
    READ_MASK_MONTH_HOLD_WG3_SYJSR_2,
    READ_MASK_MONTH_HOLD_WG3_SYJSR_3,
    READ_MASK_MONTH_HOLD_WG3_SYJSR_4,                     
    READ_MASK_MONTH_HOLD_WG3_MH,
    READ_MASK_MONTH_HOLD_WG3_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_WG3_CUR_Z,
    READ_MASK_MONTH_HOLD_WG3_CUR_1,
    READ_MASK_MONTH_HOLD_WG3_CUR_2,
    READ_MASK_MONTH_HOLD_WG3_CUR_3,
    READ_MASK_MONTH_HOLD_WG3_CUR_4,
    
    READ_MASK_MONTH_HOLD_WG4_SYJSR,
    READ_MASK_MONTH_HOLD_WG4_SYJSR_Z,
    READ_MASK_MONTH_HOLD_WG4_SYJSR_1,
    READ_MASK_MONTH_HOLD_WG4_SYJSR_2,
    READ_MASK_MONTH_HOLD_WG4_SYJSR_3,
    READ_MASK_MONTH_HOLD_WG4_SYJSR_4,                      
    READ_MASK_MONTH_HOLD_WG4_MH, 
    READ_MASK_MONTH_HOLD_WG4_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_WG4_CUR_Z,
    READ_MASK_MONTH_HOLD_WG4_CUR_1,
    READ_MASK_MONTH_HOLD_WG4_CUR_2,
    READ_MASK_MONTH_HOLD_WG4_CUR_3,
    READ_MASK_MONTH_HOLD_WG4_CUR_4,
    
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_SYJSR,                     
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_MH, 
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_07_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_CUR_Z,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_CUR_1,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_CUR_2,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_CUR_3,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_CUR_4,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_TIME_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_TIME_CUR_Z,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_TIME_CUR_1,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_TIME_CUR_2,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_TIME_CUR_3,
    READ_MASK_MONTH_HOLD_ZYG_ZDXL_TIME_CUR_4,
    
    READ_MASK_MONTH_HOLD_FYG_ZDXL_SYJSR,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_MH,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_07_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_CUR_Z,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_CUR_1,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_CUR_2,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_CUR_3,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_CUR_4,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_TIME_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_TIME_CUR_Z,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_TIME_CUR_1,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_TIME_CUR_2,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_TIME_CUR_3,
    READ_MASK_MONTH_HOLD_FYG_ZDXL_TIME_CUR_4,
    
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_SYJSR,                  
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_MH,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_CUR_Z,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_CUR_1,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_CUR_2,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_CUR_3,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_CUR_4,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_TIME_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_TIME_CUR_Z,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_TIME_CUR_1,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_TIME_CUR_2,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_TIME_CUR_3,
    READ_MASK_MONTH_HOLD_ZWG_ZDXL_TIME_CUR_4,
    
    READ_MASK_MONTH_HOLD_FWG_ZDXL_SYJSR,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_MH,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_CUR_Z,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_CUR_1,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_CUR_2,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_CUR_3,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_CUR_4,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_TIME_CUR_BLOCK,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_TIME_CUR_Z,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_TIME_CUR_1,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_TIME_CUR_2,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_TIME_CUR_3,
    READ_MASK_MONTH_HOLD_FWG_ZDXL_TIME_CUR_4,

    READ_MASK_MONTH_HOLD_ZXYG_JSR = 7,
    READ_MASK_MONTH_HOLD_WG1_JSR = 59,
    READ_MASK_MONTH_HOLD_WG2_JSR = 72,
    READ_MASK_MONTH_HOLD_WG3_JSR = 85,
    READ_MASK_MONTH_HOLD_WG4_JSR = 98,

    #ifdef __PLC_REC_VOLTMETER1__ //电压表
    READ_MASK_MONTH_HOLD_DYHGL_A = 174,
    READ_MASK_MONTH_HOLD_DYHGL_B,
    READ_MASK_MONTH_HOLD_DYHGL_C,
     READ_MASK_MONTH_HOLD_BCZ_CS,
     #else
     READ_MASK_MONTH_HOLD_BCZ_CS=174,
    #endif


    READ_MASK_MONTH_HOLD_S1C_BC_JL,
    READ_MASK_MONTH_HOLD_KDNH_ZCS,
    READ_MASK_MONTH_HOLD_S1C_KDG_JL,

    READ_MASK_MONTH_HOLD_JS_ZCS,
    READ_MASK_MONTH_HOLD_S1C_JS_JL,
    READ_MASK_MONTH_HOLD_SDB_BC_ZCS,
    READ_MASK_MONTH_HOLD_S1C_SDB_BC_JL,

    READ_MASK_MONTH_HOLD_GDCS_PREPAY,//以下3个掩码 购电信息  没使用 但是在表里面 这里不配置抄读有问题
    READ_MASK_MONTH_HOLD_SYJE_PREPAY,
    READ_MASK_MONTH_HOLD_LJGDJE_PREPAY,
    // 江苏F35  3个掩码
    READ_MASK_MONTH_HOLD_A_VOLTAGE_STATE,
    READ_MASK_MONTH_HOLD_B_VOLTAGE_STATE,
    READ_MASK_MONTH_HOLD_C_VOLTAGE_STATE,
    //四表月冻结使用日冻结转存 此处10个掩码未添加，后续使用请注意！！

}READ_MASK_MONTH_HOLD;

typedef enum
{
    // 原来6个 现在增加6个  总计 12个 
    READ_MASK_CURVE_ZFXYWG_LOAD_14 = 0,// 14负荷 061006FF 有功无功负荷记录块 
    READ_MASK_CURVE_ZXYG_LOAD_14, // 14负荷 06100601 正向有功负荷
    READ_MASK_CURVE_FXYG_LOAD_14, // 14负荷 06100602 反向有功负荷
    READ_MASK_CURVE_ZHWG1_LOAD_14,// 14负荷 06100603 组合无功1负荷
    READ_MASK_CURVE_ZHWG2_LOAD_14,// 14负荷 06100604 组合无功2负荷
    READ_MASK_CURVE_ZFXYWG_LOAD_12,// 12负荷 06040001 有功无功负荷记录块
    #ifdef __PROVICE_BEIJING__
    READ_MASK_CURVE_ZXYG_HOUR_HOLD,
    READ_MASK_CURVE_ZXYG,
    READ_MASK_CURVE_ZXYG_Z,
    READ_MASK_CURVE_ZXYG_1,
    READ_MASK_CURVE_ZXYG_2,
    READ_MASK_CURVE_ZXYG_3,
    READ_MASK_CURVE_ZXYG_4,
    READ_MASK_CURVE_FXYG_HOUR_HOLD,
    READ_MASK_CURVE_FXYG,
    READ_MASK_CURVE_FXYG_Z,
    READ_MASK_CURVE_FXYG_1,
    READ_MASK_CURVE_FXYG_2,
    READ_MASK_CURVE_FXYG_3,
    READ_MASK_CURVE_FXYG_4,
    READ_MASK_CURVE_ZXWG,
    READ_MASK_CURVE_ZXWG_Z,
    READ_MASK_CURVE_ZXWG_1,
    READ_MASK_CURVE_ZXWG_2,
    READ_MASK_CURVE_ZXWG_3,
    READ_MASK_CURVE_ZXWG_4,
    READ_MASK_CURVE_FXWG,
    READ_MASK_CURVE_FXWG_Z,
    READ_MASK_CURVE_FXWG_1,
    READ_MASK_CURVE_FXWG_2,
    READ_MASK_CURVE_FXWG_3,
    READ_MASK_CURVE_FXWG_4,
    #else
    READ_MASK_CURVE_ZXYG_HOUR_HOLD,
    READ_MASK_CURVE_ZXYG,
    READ_MASK_CURVE_FXYG_HOUR_HOLD,
    READ_MASK_CURVE_FXYG,
    READ_MASK_CURVE_ZXWG,
    READ_MASK_CURVE_FXWG,
    #endif

    // 4  6  10 个   22 
    READ_MASK_CURVE_XXWG_LOAD_14,  // 14负荷 061007FF 四象限无功负荷记录块
    READ_MASK_CURVE_XXWG1_LOAD_14, // 14负荷 06100701 第一象限无功负荷
    READ_MASK_CURVE_XXWG2_LOAD_14, // 14负荷 06100702 第二象限无功负荷
    READ_MASK_CURVE_XXWG3_LOAD_14, // 14负荷 06100703 第三象限无功负荷
    READ_MASK_CURVE_XXWG4_LOAD_14, // 14负荷 06100704 第四象限无功负荷
    READ_MASK_CURVE_XXWG_LOAD_12,  // 12负荷 06050001 四象限无功负荷记录块
    READ_MASK_CURVE_WG1,
    READ_MASK_CURVE_WG2,
    READ_MASK_CURVE_WG3,
    READ_MASK_CURVE_WG4,

    // 9 + 新增9 = 18 40
    READ_MASK_CURVE_V_BLOCK_LOAD_14,  // 14负荷 061001FF 电压负荷记录块
    READ_MASK_CURVE_V_A_LOAD_14, // 14负荷 06100101 A相电压负荷
    READ_MASK_CURVE_V_B_LOAD_14, // 14负荷 06100102 B相电压负荷
    READ_MASK_CURVE_V_C_LOAD_14, // 14负荷 06100103 C相电压负荷
    READ_MASK_CURVE_I_BLOCK_LOAD_14,  // 14负荷 061002FF 电流负荷记录块
    READ_MASK_CURVE_I_A_LOAD_14, // 14负荷 06100201 A相电流负荷
    READ_MASK_CURVE_I_B_LOAD_14, // 14负荷 06100202 B相电流负荷
    READ_MASK_CURVE_I_C_LOAD_14, // 14负荷 06100203 C相电流负荷
    READ_MASK_CURVE_VI_BLOCK_LOAD_12,  // 12负荷 06010001 电压电流负荷记录块
    READ_MASK_CURVE_V_BLOCK,                 // 电压块
    READ_MASK_CURVE_V_A,                     // 电压A
    READ_MASK_CURVE_V_B,                     // 电压B
    READ_MASK_CURVE_V_C,                     // 电压C
    READ_MASK_CURVE_I_BLOCK,                 // 电流块
    READ_MASK_CURVE_I_A,                     // 电流A
    READ_MASK_CURVE_I_B,                     // 电流B
    READ_MASK_CURVE_I_C,                     // 电流C
    READ_MASK_CURVE_ZERO_I,                  //零线电流

    // 10 + 11 = 21   61
    READ_MASK_CURVE_YGGL_BLOCK_LOAD_14,  // 14负荷 061003FF 有功功率负荷记录块
    READ_MASK_CURVE_YGGL_Z_LOAD_14, // 14负荷 06100300 总有功功率负荷
    READ_MASK_CURVE_YGGL_A_LOAD_14, // 14负荷 06100301 A相有功功率负荷
    READ_MASK_CURVE_YGGL_B_LOAD_14, // 14负荷 06100302 B相有功功率负荷
    READ_MASK_CURVE_YGGL_C_LOAD_14, // 14负荷 06100303 C相有功功率负荷
    READ_MASK_CURVE_WGGL_BLOCK_LOAD_14,  // 14负荷 061004FF 无功功率负荷记录块
    READ_MASK_CURVE_WGGL_Z_LOAD_14, // 14负荷 06100400 总无功功率负荷
    READ_MASK_CURVE_WGGL_A_LOAD_14, // 14负荷 06100401 A相无功功率负荷
    READ_MASK_CURVE_WGGL_B_LOAD_14, // 14负荷 06100402 B相无功功率负荷
    READ_MASK_CURVE_WGGL_C_LOAD_14, // 14负荷 06100403 C相无功功率负荷
    READ_MASK_CURVE_YWGGL_BLOCK_LOAD_12,  // 12负荷 06020001 有无功功率负荷记录块
    READ_MASK_CURVE_YGGL_BLOCK,                 // 有功功率块
    READ_MASK_CURVE_YGGL_Z,                     // 有功功率
    READ_MASK_CURVE_YGGL_A,                     // 有功功率A
    READ_MASK_CURVE_YGGL_B,                     // 有功功率B
    READ_MASK_CURVE_YGGL_C,                     // 有功功率C
    READ_MASK_CURVE_WGGL_BLOCK,                 // 无功功率块
    READ_MASK_CURVE_WGGL_Z,                     // 无功功率
    READ_MASK_CURVE_WGGL_A,                     // 无功功率A
    READ_MASK_CURVE_WGGL_B,                     // 无功功率B
    READ_MASK_CURVE_WGGL_C,                     // 无功功率C

    // 5 +6 = 11      72 
    READ_MASK_CURVE_GLYS_BLOCK_LOAD_14,  // 14负荷 061005FF 功率因数负荷记录块
    READ_MASK_CURVE_GLYS_Z_LOAD_14,      // 14负荷 06100500 总功率因数负荷
    READ_MASK_CURVE_GLYS_A_LOAD_14,      // 14负荷 06100501 A相功率因数负荷
    READ_MASK_CURVE_GLYS_B_LOAD_14,      // 14负荷 06100502 B相功率因数负荷
    READ_MASK_CURVE_GLYS_C_LOAD_14,      // 14负荷 06100503 C相功率因数负荷
    READ_MASK_CURVE_GLYS_BLOCK_LOAD_12,  // 12负荷 06030001 功率因数负荷记录块
    READ_MASK_CURVE_GLYS_BLOCK,                 // 功率因数块
    READ_MASK_CURVE_GLYS_Z,                     // 功率因数
    READ_MASK_CURVE_GLYS_A,                     // 功率因数A
    READ_MASK_CURVE_GLYS_B,                     // 功率因数B
    READ_MASK_CURVE_GLYS_C,                     // 功率因数C

    /*11+2 = 13   85  */
    READ_MASK_CURVE_XJ_BLOCK,                   //相角数据块
    READ_MASK_CURVE_XJ_UA,                      //相角Ua
    READ_MASK_CURVE_XJ_UB,                      //相角Ub
    READ_MASK_CURVE_XJ_UC,                      //相角Uc
    READ_MASK_CURVE_XJ_BLOCK_JC,                //交采相角数据块
    READ_MASK_CURVE_XJ_IA_JC,                   //交采相角Ia
    READ_MASK_CURVE_XJ_IB_JC,                   //交采相角Ib
    READ_MASK_CURVE_XJ_IC_JC,                   //交采相角Ic
    READ_MASK_CURVE_XJ_UA_JC,                   //交采相角Ua
    READ_MASK_CURVE_XJ_UB_JC,                   //交采相角Ub
    READ_MASK_CURVE_XJ_UC_JC,                   //交采相角Uc
    READ_MASK_CURVE_GF_NBQ,
    READ_MASK_CURVE_ZHYG,                       //组合有功总电能     

    #ifdef  __MX_BDZZD__
    READ_MASK_CURVE_ZXYG_1,
    READ_MASK_CURVE_ZXYG_2,
    READ_MASK_CURVE_ZXYG_3,
    READ_MASK_CURVE_ZXYG_4,      
    READ_MASK_CURVE_ZXWG_1,
    READ_MASK_CURVE_ZXWG_2,
    READ_MASK_CURVE_ZXWG_3,
    READ_MASK_CURVE_ZXWG_4,  
    #endif
    READ_MASK_CURVE_DQSYDLZ,
    READ_MASK_CURVE_BPLC_STA_INFO,
    #ifdef __COUNTRY_ISRAEL__
    READ_MASK_CURVE_ISRAEL_HOUR_DATA,           //以色列小时冻结数据，负荷记录格式
    READ_MASK_CURVE_SOUTH_AFRICA_HOUR_DATA,     //南非小时实时数据，也是负荷记录格式
    READ_MASK_CURVE_ISRAEL_THREE_PHASE,
    READ_MASK_CURVE_HZ,                //频率，不抄
    READ_MASK_CURVE_ISRAEL_XL_ZX,
    READ_MASK_CURVE_ISRAEL_XL_FX,
    READ_MASK_CURVE_ZXWG_T1234,
    READ_MASK_CURVE_FXWG_T1234,
    READ_MASK_CURVE_ZHYG_T1234,
    READ_MASK_CURVE_LOAD_PROFILE,
    #endif
    #ifdef __MEXICO_RAIL__
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_YGGL,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_WGGL,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_DY,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_DL,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_LXDL,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_ZXYG,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_FXYG,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_GLYS,
    READ_MASK_CURVE_MEXICO_DAYLIGHT_SAVING_WG1
    #endif
    #ifdef __INDONESIA_DLMS_TEST__
    READ_MASK_CURVE_INDONESIA_SZGL,
    READ_MASK_CURVE_INDONESIA_ZXDN,
    READ_MASK_CURVE_INDONESIA_FXDN,
    READ_MASK_CURVE_INDONESIA_A_ZXYG,
    READ_MASK_CURVE_INDONESIA_A_FXYG,
    READ_MASK_CURVE_INDONESIA_A_ZXWG,
    READ_MASK_CURVE_INDONESIA_A_FXWG,
    #endif
}READ_MASK_CURVE;
typedef enum
{
    READ_MASK_CURVE_V_BLOCK_HUNAN = 0,             // 电压块
    READ_MASK_CURVE_V_A_HUNAN,                     // 电压A
    READ_MASK_CURVE_V_B_HUNAN,                     // 电压B
    READ_MASK_CURVE_V_C_HUNAN,                     // 电压C
    READ_MASK_CURVE_I_BLOCK_HUNAN,                 // 电流块
    READ_MASK_CURVE_I_A_HUNAN,                     // 电流A
    READ_MASK_CURVE_I_B_HUNAN,                     // 电流B
    READ_MASK_CURVE_I_C_HUNAN,                     // 电流C
    READ_MASK_CURVE_ZERO_I_HUNAN,                  //零线电流
    READ_MASK_CURVE_ZXYG_HUNAN,               //正向有功
    READ_MASK_CURVE_YGGL_HUNAN,               //有功功率
   
}READ_MASK_CURVE_HUNAN;
typedef enum
{
    READ_MASK_LAST_DAY_HOLD_CURVE_ZXYG = 0,             // 正向有功
    READ_MASK_LAST_DAY_HOLD_CURVE_FXYG,
    READ_MASK_LAST_DAY_HOLD_CURVE_GXFH,                //广西负荷记录

    // 9
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_V_BLOCK,   //负荷记录14版本 061001FF 电压曲线数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_V_A,       //负荷记录14版本 06100101 A相电压
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_V_B,       //负荷记录14版本 06100102 B相电压
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_V_C,       //负荷记录14版本 06100103 C相电压
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_I_BLOCK,   //负荷记录14版本 061002FF 电流曲线数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_I_A,       //负荷记录14版本 06100201 A相电流
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_I_B,       //负荷记录14版本 06100202 B相电流
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_I_C,       //负荷记录14版本 06100203 C相电流
    READ_MASK_LAST_DAY_HOLD_CURVE_LOAD1,                     // 负荷记录1 12格式 06010001 电压 电流 频率 17字节

    // 11   
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGGL_BLOCK,   //负荷记录14版本 061003FF 有功功率曲线数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGGL_Z,       //负荷记录14版本 06100300 总有功功率
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGGL_A,       //负荷记录14版本 06100301 A相有功功率
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGGL_B,       //负荷记录14版本 06100302 B相有功功率
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGGL_C,       //负荷记录14版本 06100303 C相有功功率   
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_WGGL_BLOCK,   //负荷记录14版本 061004FF 无功功率曲线数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_WGGL_Z,       //负荷记录14版本 06100400 总无功功率
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_WGGL_A,       //负荷记录14版本 06100401 A相无功功率
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_WGGL_B,       //负荷记录14版本 06100402 B相无功功率
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_WGGL_C,       //负荷记录14版本 06100403 C相无功功率
    READ_MASK_LAST_DAY_HOLD_CURVE_LOAD2,                // 负荷记录2 12格式 06020001 有无功功率 24字节

    // 6   
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_PF_BLOCK,   //负荷记录14版本 061005FF 功率因数数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_PF_Z,       //负荷记录14版本 06100501 总功率因数
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_PF_A,       //负荷记录14版本 06100501 A功率因数
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_PF_B,       //负荷记录14版本 06100502 B功率因数
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_PF_C,       //负荷记录14版本 06100503 C功率因数
    READ_MASK_LAST_DAY_HOLD_CURVE_LOAD3,                     // 负荷记录3 12格式 06030001 功率因数 8 字节

    // 6   
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGWG_BLOCK,   //负荷记录14版本 061006FF 有功 无功曲线总电能数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_ZXYG_Z,       //负荷记录14版本 06100601 正向有功总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_FXYG_Z,       //负荷记录14版本 06100602 反向有功总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_ZHWG1_Z,      //负荷记录14版本 06100603 组合无功1总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_ZHWG2_Z,      //负荷记录14版本 06100604 组合无功2总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_LOAD4,                     // 负荷记录4 12格式 06040001 有无功电总电能 16字节
    
    // 6     
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_XXWG_BLOCK,   //负荷记录14版本 061007FF 四象限无功曲线总电能数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_1XXWG_Z,       //负荷记录14版本 06100701 第一象限无功总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_2XXWG_Z,       //负荷记录14版本 06100702 第二象限无功总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_3XXWG_Z,      //负荷记录14版本 06100703 第三象限无功总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_4XXWG_Z,      //负荷记录14版本 06100704 第四象限无功总电能
    READ_MASK_LAST_DAY_HOLD_CURVE_LOAD5,                     // 负荷记录5 12格式 06050001 四象限无功总电能 16 

    // 4  
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGWGXL_BLOCK,   //负荷记录14版本 061008FF 当前需量曲线数据块
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_YGXL_Z,       //负荷记录14版本 06100801 当前有功需量
    READ_MASK_LAST_DAY_HOLD_CURVE_14_LOAD_WGXL_Z,       //负荷记录14版本 06100802 当前无功需量
    READ_MASK_LAST_DAY_HOLD_CURVE_LOAD6,                     // 负荷记录6 12格式 06060001 当前有无功需量 6字节
    //READ_MASK_LAST_DAY_HOLD_CURVE_V_A,                     // 电压A
    //READ_MASK_LAST_DAY_HOLD_CURVE_V_B,                     // 电压B
    //READ_MASK_LAST_DAY_HOLD_CURVE_V_C,                     // 电压C
    //READ_MASK_LAST_DAY_HOLD_CURVE_I_BLOCK,                 // 电流块
    //READ_MASK_LAST_DAY_HOLD_CURVE_I_A,                     // 电流A
    //READ_MASK_LAST_DAY_HOLD_CURVE_I_B,                     // 电流B
    //READ_MASK_LAST_DAY_HOLD_CURVE_I_C,                     // 电流C
    //READ_MASK_LAST_DAY_HOLD_CURVE_ZERO_I,                  //零线电流
    READ_MASK_LAST_DAY_HOLD_CURVE_LOAD_PROFILE,
    READ_MASK_LAST_CURVE_ISRAEL_HOUR,


}READ_MASK_LAST_DAY_HOLD_CURVE;
/*++++++
下面的预抄数据添加规则：
1、按照read_meter_prepare_data.c中READ_WRITE_DATA const CUR_DATA_PHY_LIST[]的顺序进行添加；
2、如果添加不对应，会出现抄读不一致的情况
3、如果只要抄读个别数据，可以直接赋值，如=331，分费率可以不写，block=上一个+6；
4、块数据，注意要包含里面的分物理量，顺序不是表面上的关系，如果写了CUR_DATA_PHY_LIST[]中，写的BLOCK5,那下一个位置+6。
5、如正向有功电能，里面有总和费率1-4，所以编号都要改变
++++++*/
typedef enum
{
    READ_MASK_CUR_READ_INFO=0,                 // F170数据
   //F33
    READ_MASK_CUR_DATA_ZXYG_BLOCK,                 // 正向有功电能示值
    READ_MASK_CUR_DATA_ZXYG_CUR_Z,
    READ_MASK_CUR_DATA_ZXYG_CUR_1,
    READ_MASK_CUR_DATA_ZXYG_CUR_2,
    READ_MASK_CUR_DATA_ZXYG_CUR_3,
    READ_MASK_CUR_DATA_ZXYG_CUR_4,

    READ_MASK_CUR_DATA_ZXWG_BLOCK,                 // 正向无功，组合无功1
    READ_MASK_CUR_DATA_ZXWG_CUR_Z,
    READ_MASK_CUR_DATA_ZXWG_CUR_1,
    READ_MASK_CUR_DATA_ZXWG_CUR_2,
    READ_MASK_CUR_DATA_ZXWG_CUR_3,
    READ_MASK_CUR_DATA_ZXWG_CUR_4,
    
    READ_MASK_CUR_DATA_WG1_BLOCK,                          // 无功1象限
    READ_MASK_CUR_DATA_WG1_CUR_Z,
    READ_MASK_CUR_DATA_WG1_CUR_1,
    READ_MASK_CUR_DATA_WG1_CUR_2,
    READ_MASK_CUR_DATA_WG1_CUR_3,
    READ_MASK_CUR_DATA_WG1_CUR_4,

    READ_MASK_CUR_DATA_WG4_BLOCK,                          // 无功4象限
    READ_MASK_CUR_DATA_WG4_CUR_Z,
    READ_MASK_CUR_DATA_WG4_CUR_1,
    READ_MASK_CUR_DATA_WG4_CUR_2,
    READ_MASK_CUR_DATA_WG4_CUR_3,
    READ_MASK_CUR_DATA_WG4_CUR_4,
    //F34
    READ_MASK_CUR_DATA_FXYG_BLOCK,                 // 反向有功电能示值
    READ_MASK_CUR_DATA_FXYG_CUR_Z,
    READ_MASK_CUR_DATA_FXYG_CUR_1,
    READ_MASK_CUR_DATA_FXYG_CUR_2,
    READ_MASK_CUR_DATA_FXYG_CUR_3,
    READ_MASK_CUR_DATA_FXYG_CUR_4,

    READ_MASK_CUR_DATA_FXWG_BLOCK,                // 组合无功2
    READ_MASK_CUR_DATA_FXWG_CUR_Z,
    READ_MASK_CUR_DATA_FXWG_CUR_1,
    READ_MASK_CUR_DATA_FXWG_CUR_2,
    READ_MASK_CUR_DATA_FXWG_CUR_3,
    READ_MASK_CUR_DATA_FXWG_CUR_4,

    READ_MASK_CUR_DATA_WG2_BLOCK,                          // 无功2象限
    READ_MASK_CUR_DATA_WG2_CUR_Z,
    READ_MASK_CUR_DATA_WG2_CUR_1,
    READ_MASK_CUR_DATA_WG2_CUR_2,
    READ_MASK_CUR_DATA_WG2_CUR_3,
    READ_MASK_CUR_DATA_WG2_CUR_4,

    READ_MASK_CUR_DATA_WG3_BLOCK,                          // 无功3象限
    READ_MASK_CUR_DATA_WG3_CUR_Z,
    READ_MASK_CUR_DATA_WG3_CUR_1,
    READ_MASK_CUR_DATA_WG3_CUR_2,
    READ_MASK_CUR_DATA_WG3_CUR_3,
    READ_MASK_CUR_DATA_WG3_CUR_4,

    //F25
    READ_MASK_CUR_DATA_YGGL_BLOCK,                 // 有功功率块
    READ_MASK_CUR_DATA_YGGL_Z,                     // 有功功率
    READ_MASK_CUR_DATA_YGGL_A,                     // 有功功率A
    READ_MASK_CUR_DATA_YGGL_B,                     // 有功功率B
    READ_MASK_CUR_DATA_YGGL_C,                     // 有功功率C
    READ_MASK_CUR_DATA_WGGL_BLOCK,                 // 无功功率块
    READ_MASK_CUR_DATA_WGGL_Z,                     // 无功功率
    READ_MASK_CUR_DATA_WGGL_A,                     // 无功功率A
    READ_MASK_CUR_DATA_WGGL_B,                     // 无功功率B
    READ_MASK_CUR_DATA_WGGL_C,                     // 无功功率C
    READ_MASK_CUR_DATA_GLYS_BLOCK,                 // 功率因数块
    READ_MASK_CUR_DATA_GLYS_Z,                     // 功率因数
    READ_MASK_CUR_DATA_GLYS_A,                     // 功率因数A
    READ_MASK_CUR_DATA_GLYS_B,                     // 功率因数B
    READ_MASK_CUR_DATA_GLYS_C,                     // 功率因数C
    READ_MASK_CUR_DATA_V_BLOCK,                 // 电压块
    READ_MASK_CUR_DATA_V_A,                     // 电压A
    READ_MASK_CUR_DATA_V_B,                     // 电压B
    READ_MASK_CUR_DATA_V_C,                     // 电压C
    READ_MASK_CUR_DATA_I_BLOCK,                 // 电流块
    READ_MASK_CUR_DATA_I_A,                     // 电流A
    READ_MASK_CUR_DATA_I_B,                     // 电流B
    READ_MASK_CUR_DATA_I_C,                     // 电流C
    READ_MASK_CUR_DATA_ZERO_I,                  //零线电流
    READ_MASK_CUR_DATA_SZGL_BLOCK,                   //视在功率数据块
    READ_MASK_CUR_DATA_SZGL_Z,                      //视在功率总
    READ_MASK_CUR_DATA_SZGL_A,                      //视在功率A
    READ_MASK_CUR_DATA_SZGL_B,                      //视在功率B
    READ_MASK_CUR_DATA_SZGL_C,                      //视在功率C

    //F26
    READ_MASK_CUR_DATA_DXCS_A,                   //A相断相总次数
    READ_MASK_CUR_DATA_DXCS_B,                   //B相断相总次数
    READ_MASK_CUR_DATA_DXCS_C,                   //C相断相总次数
    READ_MASK_CUR_DATA_DXCS_Z,                   //断相总次数
    READ_MASK_CUR_DATA_DXSJ_ABC,                 //ABC断项累计时间
    READ_MASK_CUR_DATA_DXSJ_A,                   //A断相累积时间
    READ_MASK_CUR_DATA_DXSJ_B,                   //B断相累积时间
    READ_MASK_CUR_DATA_DXSJ_C,                   //C断相累积时间
    READ_MASK_CUR_DATA_DXSJ_Z,                   //断相累积时间
    READ_MASK_CUR_DATA_DXQSSJ_A,                   //A近一次断相起始时间
    READ_MASK_CUR_DATA_DXQSSJ_B,                   //B近一次断相起始时间
    READ_MASK_CUR_DATA_DXQSSJ_C,                   //C近一次断相起始时间
    READ_MASK_CUR_DATA_DXQSSJ_Z,                   //最近一次断相起始时间
    READ_MASK_CUR_DATA_DXJSSJ_A,                   //A近一次断相结束时间
    READ_MASK_CUR_DATA_DXJSSJ_B,                   //B近一次断相结束时间
    READ_MASK_CUR_DATA_DXJSSJ_C,                   //C近一次断相结束时间
    READ_MASK_CUR_DATA_DXJSSJ_Z,                   //最近一次断相结束时间
    //F27
    READ_MASK_CUR_DATA_DBRL,                   //电表日历
    READ_MASK_CUR_DATA_DBSJ,                   //电表时间
    READ_MASK_CUR_DATA_BCCS_Z,                   //电编程总次数
    READ_MASK_CUR_DATA_BCJL_01,                   //最近1次电表编程时刻
    READ_MASK_CUR_DATA_BCQL_Z,                   //电表清零总次数
    READ_MASK_CUR_DATA_BCQL_01,                   //最近一次清零时刻
    READ_MASK_CUR_DATA_XLQL_Z,                   //电表需量清零总次数
    READ_MASK_CUR_DATA_XLQL_01,                   //最近一次需量清零时刻
    READ_MASK_CUR_DATA_SJQL_Z,                   //事件清零总次数
    READ_MASK_CUR_DATA_SJQL_01,                   //最近一次事件清零时刻
    READ_MASK_CUR_DATA_DBJS_Z,                   //电表校时总次数
    READ_MASK_CUR_DATA_DBJS_01,                   //最近一次清零时刻
    READ_MASK_CUR_DATA_DCGZSJ,                   //电表电池工作时间

    //F28
    READ_MASK_CUR_DATA_DBZTZ = 147,                   //电表运行状态字

    //F35
    READ_MASK_CUR_DATA_ZYG_ZDXL = 155,
    READ_MASK_CUR_DATA_ZYG_ZDXL_Z,
    READ_MASK_CUR_DATA_ZYG_ZDXL_1,
    READ_MASK_CUR_DATA_ZYG_ZDXL_2,
    READ_MASK_CUR_DATA_ZYG_ZDXL_3,
    READ_MASK_CUR_DATA_ZYG_ZDXL_4,
    READ_MASK_CUR_DATA_ZYG_ZDXL_97_BLOCK,
    READ_MASK_CUR_DATA_ZYG_ZDXL_97_Z,
    READ_MASK_CUR_DATA_ZYG_ZDXL_97_1,
    READ_MASK_CUR_DATA_ZYG_ZDXL_97_2,
    READ_MASK_CUR_DATA_ZYG_ZDXL_97_3,
    READ_MASK_CUR_DATA_ZYG_ZDXL_97_4,
    READ_MASK_CUR_DATA_ZYG_ZDXL_FSSJ_97_BLOCK,
    READ_MASK_CUR_DATA_ZYG_ZDXL_FSSJ_97_Z,
    READ_MASK_CUR_DATA_ZYG_ZDXL_FSSJ_97_1,
    READ_MASK_CUR_DATA_ZYG_ZDXL_FSSJ_97_2,
    READ_MASK_CUR_DATA_ZYG_ZDXL_FSSJ_97_3,
    READ_MASK_CUR_DATA_ZYG_ZDXL_FSSJ_97_4,  
    READ_MASK_CUR_DATA_ZWG_ZDXL,
    READ_MASK_CUR_DATA_ZWG_ZDXL_Z,
    READ_MASK_CUR_DATA_ZWG_ZDXL_1,
    READ_MASK_CUR_DATA_ZWG_ZDXL_2,
    READ_MASK_CUR_DATA_ZWG_ZDXL_3,
    READ_MASK_CUR_DATA_ZWG_ZDXL_4,
    READ_MASK_CUR_DATA_ZWG_ZDXL_97_BLOCK,
    READ_MASK_CUR_DATA_ZWG_ZDXL_97_Z,
    READ_MASK_CUR_DATA_ZWG_ZDXL_97_1,
    READ_MASK_CUR_DATA_ZWG_ZDXL_97_2,
    READ_MASK_CUR_DATA_ZWG_ZDXL_97_3,
    READ_MASK_CUR_DATA_ZWG_ZDXL_97_4,
    READ_MASK_CUR_DATA_ZWG_ZDXL_FSSJ_97_BLOCK,
    READ_MASK_CUR_DATA_ZWG_ZDXL_FSSJ_97_Z,
    READ_MASK_CUR_DATA_ZWG_ZDXL_FSSJ_97_1,
    READ_MASK_CUR_DATA_ZWG_ZDXL_FSSJ_97_2,
    READ_MASK_CUR_DATA_ZWG_ZDXL_FSSJ_97_3,
    READ_MASK_CUR_DATA_ZWG_ZDXL_FSSJ_97_4, 
    READ_MASK_CUR_DATA_ZYG_ZDXL_A, 
    READ_MASK_CUR_DATA_ZYG_ZDXL_B, 
    READ_MASK_CUR_DATA_ZYG_ZDXL_C, 
    //F36
    READ_MASK_CUR_DATA_FYG_ZDXL,
    READ_MASK_CUR_DATA_FYG_ZDXL_Z,
    READ_MASK_CUR_DATA_FYG_ZDXL_1,
    READ_MASK_CUR_DATA_FYG_ZDXL_2,
    READ_MASK_CUR_DATA_FYG_ZDXL_3,
    READ_MASK_CUR_DATA_FYG_ZDXL_4,
    READ_MASK_CUR_DATA_FYG_ZDXL_97_BLOCK,
    READ_MASK_CUR_DATA_FYG_ZDXL_97_Z,
    READ_MASK_CUR_DATA_FYG_ZDXL_97_1,
    READ_MASK_CUR_DATA_FYG_ZDXL_97_2,
    READ_MASK_CUR_DATA_FYG_ZDXL_97_3,
    READ_MASK_CUR_DATA_FYG_ZDXL_97_4,
    READ_MASK_CUR_DATA_FYG_ZDXL_FSSJ_97_BLOCK,
    READ_MASK_CUR_DATA_FYG_ZDXL_FSSJ_97_Z,
    READ_MASK_CUR_DATA_FYG_ZDXL_FSSJ_97_1,
    READ_MASK_CUR_DATA_FYG_ZDXL_FSSJ_97_2,
    READ_MASK_CUR_DATA_FYG_ZDXL_FSSJ_97_3,
    READ_MASK_CUR_DATA_FYG_ZDXL_FSSJ_97_4, 
    READ_MASK_CUR_DATA_FWG_ZDXL,
    READ_MASK_CUR_DATA_FWG_ZDXL_Z,
    READ_MASK_CUR_DATA_FWG_ZDXL_1,
    READ_MASK_CUR_DATA_FWG_ZDXL_2,
    READ_MASK_CUR_DATA_FWG_ZDXL_3,
    READ_MASK_CUR_DATA_FWG_ZDXL_4,
    READ_MASK_CUR_DATA_FWG_ZDXL_97_BLOCK,
    READ_MASK_CUR_DATA_FWG_ZDXL_97_Z,
    READ_MASK_CUR_DATA_FWG_ZDXL_97_1,
    READ_MASK_CUR_DATA_FWG_ZDXL_97_2,
    READ_MASK_CUR_DATA_FWG_ZDXL_97_3,
    READ_MASK_CUR_DATA_FWG_ZDXL_97_4,
    READ_MASK_CUR_DATA_FWG_ZDXL_FSSJ_97_BLOCK,
    READ_MASK_CUR_DATA_FWG_ZDXL_FSSJ_97_Z,
    READ_MASK_CUR_DATA_FWG_ZDXL_FSSJ_97_1,
    READ_MASK_CUR_DATA_FWG_ZDXL_FSSJ_97_2,
    READ_MASK_CUR_DATA_FWG_ZDXL_FSSJ_97_3,
    READ_MASK_CUR_DATA_FWG_ZDXL_FSSJ_97_4,         
    //F39
    READ_MASK_CUR_DATA_JSR_ZYG_ZDXL = 230,
    //F37
    READ_MASK_CUR_DATA_S1JSR_ZXYG_DN_SJK = 254,
    //F32
    READ_MASK_CUR_DATA_S1JSR_A_ZXYG_DN = 302,
    //F31
    READ_MASK_CUR_DATA_A_ZXYG_DN = 314,
    //ERC8
    READ_MASK_CUR_DATA_SDBBCZCS = READ_MASK_CUR_DATA_A_ZXYG_DN+12,      
     //ERC37
    READ_MASK_CUR_DATA_DBKBGCS = 328,                   //电表开表盖次数
    READ_MASK_CUR_DATA_KBGJL_01,                   //电表开表盖记录
    //ERC38
    READ_MASK_CUR_DATA_KDNGCS = 330,                   //电表开端钮盖次数
    READ_MASK_CUR_DATA_KDNGJL_01,                   //电表开端钮盖记录
    //ERC40
    READ_MASK_CUR_DATA_CCGRCS,                   //磁场干扰次数

    READ_MASK_CUR_DATA_SYZCS,

    READ_MASK_CUR_DATA_DDCS_Z = 338,                   // 掉电次数
    READ_MASK_CUR_DATA_DDJL_01,
    READ_MASK_CUR_DATA_DDJL_02,
    READ_MASK_CUR_DATA_DDJL_03,
    READ_MASK_CUR_DATA_DDJL_04,
    READ_MASK_CUR_DATA_DDJL_05,
    READ_MASK_CUR_DATA_DDJL_06,
    READ_MASK_CUR_DATA_DDJL_07,
    READ_MASK_CUR_DATA_DDJL_08,
    READ_MASK_CUR_DATA_DDJL_09,
    READ_MASK_CUR_DATA_DDJL_10,

    READ_MASK_CUR_DATA_HARMONIC_AXDYXB = 349,
    READ_MASK_CUR_DATA_CYMETER_STAT_WORD = 481,

   // READ_MASK_CUR_DATA_GDJE,
   // READ_MASK_CUR_DATA_GDCS,
   // READ_MASK_CUR_DATA_SYDL,

    READ_MASK_CUR_DATA_CY_XJ_SJK,

    READ_MASK_CUR_DATA_GDCS_PREPAY,
    READ_MASK_CUR_DATA_SYJE_PREPAY,
    READ_MASK_CUR_DATA_LJGDJE_PREPAY,
    READ_MASK_CUR_DATA_SYDL_PREPAY,
    READ_MASK_CUR_DATA_TZDL_PREPAY,
    READ_MASK_CUR_DATA_LJGDL_PREPAY,
    READ_MASK_CUR_DATA_SQMXDL_PREPAY,
    READ_MASK_CUR_DATA_BJDL_PREPAY,
    READ_MASK_CUR_DATA_GZDL_PREPAY,

    READ_MASK_CUR_ZHYG_BLOCK, 
    READ_MASK_CUR_ZHYG_Z, 
    READ_MASK_CUR_ZHYG_1, 
    READ_MASK_CUR_ZHYG_2, 
    READ_MASK_CUR_ZHYG_3, 
    READ_MASK_CUR_ZHYG_4, 

    READ_MASK_CUR_DATA_DY_BXSZD_Z,
    READ_MASK_CUR_DATA_DY_BXSZD_A,
    READ_MASK_CUR_DATA_DY_BXSZD_B,
    READ_MASK_CUR_DATA_DY_BXSZD_C,
    READ_MASK_CUR_DATA_DL_BXSZD_Z,
    READ_MASK_CUR_DATA_DL_BXSZD_A,
    READ_MASK_CUR_DATA_DL_BXSZD_B,
    READ_MASK_CUR_DATA_DL_BXSZD_C,

    #if (defined __PROVICE_JIANGSU__)
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_01,//不开标签 499 开标签呢??
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_02,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_03,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_04,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_05,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_06,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_07,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_08,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_09,
    READ_MASK_CUR_RESIDUAL_CURRENT_OVERRUN_RECORD_10,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_CNT,// 断线总次数 03060000 =509
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_01, // 占用 10个mask  =510
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_02,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_03,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_04,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_05,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_06,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_07,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_08,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_09,
    READ_MASK_CUR_RESIDUAL_CURRENT_BREAK_RECORD_10,

//剩余电流保护器
    //READ_MASK_CUR_DATA_YXZTZ,
    READ_MASK_CUR_DATA_ZDXJSYDLZ,// = READ_MASK_CUR_DATA_DL_BXSZD + 4,
    READ_MASK_CUR_DATA_DRZDXZDZJSK,
    READ_MASK_CUR_DATA_DLRZDZFSSK_A,
    READ_MASK_CUR_DATA_DLRZDZFSSK_B,
    READ_MASK_CUR_DATA_DLRZDZFSSK_C,

    READ_MASK_CUR_DATA_TZCS,
    READ_MASK_CUR_DATA_SYDLCXSJJL_S1C,

    //READ_MASK_CUR_DATA_XLQX_XZCS = READ_MASK_CUR_DATA_SYDLCXSJJL_S1C + 10,
    READ_MASK_CUR_DATA_XLQXSJJL_S1C = READ_MASK_CUR_DATA_SYDLCXSJJL_S1C + 10,

    //READ_MASK_CUR_DATA_SYDLBHTC_XZCS = READ_MASK_CUR_DATA_XLQXSJJL_S1C + 10,
    READ_MASK_CUR_DATA_SYDLBHTCSJJL_S1C = READ_MASK_CUR_DATA_XLQXSJJL_S1C + 10,

    //READ_MASK_CUR_DATA_CXDSD_XZCS = READ_MASK_CUR_DATA_SYDLBHTCSJJL_S1C + 10,
    READ_MASK_CUR_DATA_CXDSDJL_S1C = READ_MASK_CUR_DATA_SYDLBHTCSJJL_S1C + 10,

    //READ_MASK_CUR_DATA_SYDLCYHLDX_XZCS = READ_MASK_CUR_DATA_CXDSDJL_S1C + 10,
    READ_MASK_CUR_DATA_SYDLCYHLDXSJJL_S1C = READ_MASK_CUR_DATA_CXDSDJL_S1C + 10,

    //READ_MASK_CUR_DATA_TZCS = READ_MASK_CUR_DATA_SYDLCYHLDXSJJL_S1C + 10,
    READ_MASK_CUR_DATA_TZSJJL_S1C = READ_MASK_CUR_DATA_SYDLCYHLDXSJJL_S1C + 10,

    READ_MASK_CUR_DATA_SYDLCXXZCS = READ_MASK_CUR_DATA_TZSJJL_S1C+10,//剩余电流超限新增次数 ERC61 0381000A
    READ_MASK_CUR_DATA_XLQXXZCS,// 线路缺相新增次数  ERC55 0381000B
    READ_MASK_CUR_DATA_SYDLBHTCXZCS, //剩余电流保护退出新增次数 ERC58 0381000C
    READ_MASK_CUR_DATA_CXDSDXZCS, // 出线端失电新增次数 ERC56 0381000D
    READ_MASK_CUR_DATA_SYDLCYHLDXXZCS,// 剩余电流采样回路断线新增次数  ERC57 0381000E
    #endif
    READ_MASK_CUR_DATA_METER_SJ_READ_TIME,

    READ_MASK_CUR_DATA_A_SY_ZCS, 
    READ_MASK_CUR_DATA_A_SYLJSJ,        
    READ_MASK_CUR_DATA_B_SY_ZCS,
    READ_MASK_CUR_DATA_B_SYLJSJ,        
    READ_MASK_CUR_DATA_C_SY_ZCS,
    READ_MASK_CUR_DATA_C_SYLJSJ,
    READ_MASK_CUR_DATA_ABC_DX_LJSJ,
    READ_MASK_CUR_DATA_SYLJSJ,/*失压累积时间*/        
            
    READ_MASK_CUR_DATA_S1C_A_SY_SJK,
    READ_MASK_CUR_DATA_S1C_B_SY_SJK,
    READ_MASK_CUR_DATA_S1C_C_SY_SJK,
    READ_MASK_CUR_DATA_S1C_A_SYJL_07,
    READ_MASK_CUR_DATA_S1C_B_SYJL_07,
    READ_MASK_CUR_DATA_S1C_C_SYJL_07,
            
    READ_MASK_CUR_DATA_S1C_A_DX_SJK,
    READ_MASK_CUR_DATA_S1C_B_DX_SJK,        
    READ_MASK_CUR_DATA_S1C_C_DX_SJK,

    READ_MASK_CUR_DATA_DY_A_HGL,
    READ_MASK_CUR_DATA_DY_B_HGL,
    READ_MASK_CUR_DATA_DY_C_HGL,

    READ_MASK_CUR_DATA_ZJ1C_SY_FSSK,
    READ_MASK_CUR_DATA_A_ZJ1C_SY_FSSK,
    READ_MASK_CUR_DATA_B_ZJ1C_SY_FSSK,
    READ_MASK_CUR_DATA_C_ZJ1C_SY_FSSK,

    READ_MASK_CUR_DATA_ZJ1C_SY_JSSK,
    READ_MASK_CUR_DATA_A_ZJ1C_SY_JSSK,
    READ_MASK_CUR_DATA_B_ZJ1C_SY_JSSK,
    READ_MASK_CUR_DATA_C_ZJ1C_SY_JSSK,
#ifdef __FUJIAN_CURRENT_BREAK__
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_QLCS,
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_QLSJK,
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_DDCS = (READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_QLSJK+10),
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_DDSJK,
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_HZCS = (READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_DDSJK+10),
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_HZSJK,

    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_ZTZ = (READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_HZSJK+10),

    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_TZSJK,
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_SYDLSJK,
    READ_MASK_CUR_DATA_FUJIAN_CURRENT_BREAK_ZJSJK,
#endif
    #ifdef __INDONESIA_DLMS_TEST__
    READ_MASK_CUR_DATA_DLMS_CLOCK_JL,//时钟
    READ_MASK_CUR_DATA_DLMS_COVER_JL,//开表盖记录
    #endif
}READ_MASK_CUR_DATA;

typedef enum
{
    READ_MASK_DAY_FREEZE_EVENT_OPEN_COVER,// 开表盖
    READ_MASK_DAY_FREEZE_EVENT_OPEN_BUTTON_COVER,//开端纽盖
    READ_MASK_DAY_FREEZE_EVENT_METER_TRIP, // 跳闸

    READ_MASK_DAY_FREEZE_EVENT_METER_SWITCH, // 合闸
    READ_MASK_DAY_FREEZE_EVENT_METER_CLEAR, // 电表清零
}READ_MASK_DAY_FREEZE_EVENT;
typedef union{
    INT8U value[2];
    struct{
        INT8U xl[DEFAULT_SAVE_FL_DATA_COUNT][3];
        INT8U time[DEFAULT_SAVE_FL_DATA_COUNT][4];
    };
}XL_DATA_FORMAT;

typedef union{
    INT8U value[2];
    struct{
        INT8U xl[3];
        INT8U time[5];
    };
}XL_TIME;
typedef union{
    INT16U value;
    struct{
        INT16U z_meter:1;
        INT16U normal:1;
        INT16U ineternet_zxyg:1;
        INT16U ineternet_fxyg:1;
        INT16U no_cmp:1;
        INT16U tmp:11;
    };
}LINE_LOST_F309;


INT8U get_phy_form_list_cycle_day(INT32U phy,READ_WRITE_DATA* out);
INT8U get_phy_form_list_cruve(INT32U phy,READ_WRITE_DATA* out);
INT16U get_phy_from_list_day_init_data(INT32U phy,READ_WRITE_DATA* out,INT16U *block_begin_idx,INT8U *block_count);
INT8U prepare_read_item(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
BOOLEAN prepare_read_item_curve(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
BOOLEAN prepare_read_item_cur_data(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
INT16S app_readdata_curve(INT16U meter_idx,INT32U phy_id,INT8U td[5],INT8U *data,INT8U max_datalen);
INT16S app_readdata_cycle_day(INT16U meter_idx,INT32U phy_id,INT8U td[3],INT8U rec_datetime[5],INT8U *data,INT8U max_datalen);
INT16S app_readdata_cycle_month(INT16U meter_idx,INT32U phy_id,INT8U td[2],INT8U rec_datetime[5],INT8U *data,INT8U max_datalen);
INT16S app_readdata_cur_data(INT16U meter_idx,INT32U phy_id,INT8U rec_datetime[5],INT8U *data,INT8U max_datalen,BOOLEAN flag);
INT16U app_read_cur_part_data(INT16U meter_idx,INT32U phy,INT8U *data,INT16U read_offset,INT16U read_len,INT8U *read_time,BOOLEAN is_cur);
INT16S app_readdata_recday_data(INT16U meter_idx,INT32U phy_id,INT8U td[3],INT8U rec_datetime[5],INT8U *data,INT8U max_datalen,INT8U port);
INT16S app_readdata_month_init_data(INT16U meter_idx,INT32U phy_id,INT8U rec_datetime[5],INT8U *data,INT8U max_datalen,BOOLEAN flag);
INT16S app_readdata_day_init_data(INT16U meter_idx,INT32U phy_id,INT8U rec_datetime[5],INT8U *data,INT8U max_datalen,BOOLEAN flag);
void check_day_init_data_depend_fast_index_no_port(INT8U* rec_time);
void check_day_init_data_depend_fast_index(INT8U port,INT8U* rec_time);
INT16S app_readdata_agp_cur_data(INT16U meter_idx,INT32U phy_id,INT8U rec_datetime[5],INT8U *data,INT8U max_datalen);
INT16S app_readdata_agp_curve(INT16U meter_idx,INT32U phy_id,INT8U td[5],INT8U *data,INT8U max_datalen);
void clear_read_mask_from_meter_param(INT16U meter_idx,INT8U mask_type,INT16U idx);

INT8U save_cur_data_iec1107(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_cur_date(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_curve_data(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer,INT8U curve_save_flag);
INT8U save_curve_data_hunan(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_cycle_month(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_cycle_day(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_day_init_data(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_month_init_data(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_patch_day_hold(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
void update_meter_recstate(INT16U meter_idx,INT8U port,INT8U phase,INT8U act_phase,INT8U relay,INT8U plc_q,BOOLEAN canRec);

void compute_xlost(void);
INT8U exec_xlost(objReadPortContext * readportcontext);
INT8U check_erc_39(objReadPortContext * readportcontext);
INT16U get_phy_form_list_cur_data(INT32U phy,READ_WRITE_DATA* out,INT16U *block_begin_idx,INT8U *block_count);
BOOLEAN check_read_meter_flag(INT16U meter_idx);
BOOLEAN prepare_exec_batch_meter_task(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
BOOLEAN prepare_exec_batch_meter_task_auth(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
BOOLEAN prepare_exec_batch_meter_task_time(READ_PARAMS *read_params,INT8U *frame,INT8U* frame_len,INT16U delay,BOOLEAN is_F3);
BOOLEAN prepare_read_item_patch_day_hold(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
#ifdef __CHECK_MONTH_HOLD_TD__
BOOLEAN prepare_read_wait_cycle_month(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
#endif
BOOLEAN prepare_read_wait_cycle_day(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
INT32U get_agp_curve_save_offset(READ_WRITE_DATA *phy,INT8U td[5],INT8U midu);
INT32U get_cycle_day_save_offset(READ_WRITE_DATA *phy,INT8U td[3]);
INT32U get_cycle_month_save_offset(READ_WRITE_DATA *phy,INT8U td[2]);
INT16S app_readdata_agp_cycle_day(INT16U meter_idx,INT32U phy_id,INT8U td[3],INT8U rec_datetime[5],INT8U *data,INT8U max_datalen);
INT16S app_readdata_agp_cycle_month(INT16U meter_idx,INT32U phy_id,INT8U td[2],INT8U rec_datetime[5],INT8U *data,INT8U max_datalen);

BOOLEAN prepare_plc_read_report_meter_event_state(READ_PARAMS *read_params,INT8U *frame,INT8U* frame_len);
BOOLEAN prepare_plc_read_report_meter_ext_event_state(READ_PARAMS *read_params,INT8U *frame,INT8U* frame_len);
#ifdef __METER_DAY_FREEZE_EVENT__
BOOLEAN prepare_plc_meter_dayfreeze_event_item(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
BOOLEAN readdata_cycle_day_event(INT16U meter_idx, DAY_FREEZE_EVENT_DATA freeze_data, INT8U td [ 3 ], INT8U rec_datetime [ 5 ], INT8U * data, INT16U * datalen,BOOLEAN block_flag);
INT8U save_freeze_event_data(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT16U	app_read_cycle_day_event(INT16U meter_idx,INT16U fn,INT8U *data,INT8U td[3]);
#endif
void set_gua_meter_minute(GB3762_VENDOR *vendor_info);
BOOLEAN prepare_batch_transparent_meter_task(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
void save_batch_transparent_meter_task(INT16U meter_idx,READPORT_METER_DOCUMENT *meter_doc,INT32U item,INT8U *frame,INT16U framelen);
BOOLEAN prepare_plc_cjq_read_item(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
void save_cjq_info_data(READ_PARAMS *read_params,INT8U *data,INT8U datalen);
BOOLEAN prepare_batch_transparent_meter_cycle_task(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
//#ifdef __ANHUI_485_PATCH_96_CURVE__
void calculat_curve_time(INT8U* start_time,INT8U* end_time,INT8U num,INT8U midu);
//#endif
INT8U get_phy_form_list_cycle_month(INT32U phy,READ_WRITE_DATA* out);
INT8U readdata_month_init_data(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U rec_datetime[5],INT8U *data,INT8U *datalen,BOOLEAN flag);
INT16U get_phy_from_list_month_init_data(INT32U phy,READ_WRITE_DATA* out,INT16U *block_begin_idx,INT8U *block_count);
INT8U save_recday_data(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U get_phy_form_list_recday_data(INT32U phy,READ_WRITE_DATA* out);
INT8U readdata_cycle_day(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U td[3],INT8U rec_datetime[5],INT8U *data,INT8U *datalen,INT8U *reserve_data);
INT8U save_last_curve_cycle_day(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
#ifdef __CHECK_MONTH_HOLD_TD__
INT8U save_patch_month_hold_wait_td(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
#endif
INT8U save_patch_day_hold_wait_td(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U readdata_cycle_month(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U td[2],INT8U rec_datetime[5],INT8U *data,INT8U *datalen);
INT8U readdata_day_init_data(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U rec_datetime[5],INT8U *data,INT8U *datalen,BOOLEAN flag);
INT8U readdata_recday_data(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U td[3],INT8U rec_datetime[5],INT8U *data,INT8U *datalen);
INT8U writedata_cur_data(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U *data,INT8U datalen,INT8U *buffer);
INT8U writedata_cur_data_seq(INT16U meter_idx,READ_WRITE_DATA *phy);
INT32U get_last_data_save_offset(INT16U meter_idx,READ_WRITE_DATA *phy,BOOLEAN is_max);
INT32U get_last_data_save_offset_data(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U* data,BOOLEAN is_max);
#ifdef __PROVICE_SHAANXI_CHECK__
BOOLEAN prepare_meter_type_read_item(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
INT8U save_meter_type_data(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len);
#endif
 #ifdef __BATCH_TRANSPARENT_METER_CYCLE_TASK__
void save_batch_transparent_meter_cycle_task(READ_PARAMS *read_params,INT8U *frame);
void check_batch_transparent_meter_cycle_task(void);
#endif
#ifdef __VOLTAGE_MONITOR__
BOOLEAN prepare_read_voltage_monitor(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
#endif
#ifdef __BATCH_TRANSPARENT_METER_TASK__
   #ifdef __BATCH_TRANSPARENT_METER_TASK_USE_PRIORITY_NODE__
   void check_trans_task_priority_node(void);
   #endif
#endif
#ifdef __INSTANT_FREEZE__
void save_instant_freeze_data(READ_PARAMS *read_params,INT8U *data,INT8U datalen);
#endif

#ifdef __FUJIAN_SUPPLEMENT_SPECIFICATION__
BOOLEAN prepare_read_obj_content(READ_CTRL_WORK_INFO *read_ctrl_work_info,INT8U* frame,INT8U* frame_len);
INT8U save_resp_data(READ_CTRL_WORK_INFO *read_ctrl_work_info,INT8U* frame,INT16U* frame_len);
INT8U	get_unit(INT8U	repeat_unit);
#include "fun/tops_fun_date.h"
//extern pfun_diff_time pfun_get_diff_time[6];
//extern const pfun_diff_time pfun_get_diff_time[6];//={diff_sec_between_dt,diff_min_between_dt,diff_hour_between_dt,
	                                        //diff_day_between_dt,diff_month_between_dt,diff_year_between_dt};

//void get_save_info(INT8U plan_id[2],TASK_PLAN  *plan_info,PLAN_TASK_SAVE_CTRL *save_ctrl);
#endif
#ifdef __DAYLIGHT_SAVING_TIME__
BOOLEAN is_in_reappear_time_seg(void);
BOOLEAN check_DST_delay(void);
#endif
BOOLEAN is_month_hold_td_valid(INT8U *td);
void get_indonesia_month_hold_td(INT8U former_month[2]);
#ifdef __SICHUAN_FK_PATCH_CURVE_DATA__
//红相和兰吉尔表等补抄3天负荷记录，实现方式按曲线执行，和集中器不一样
BOOLEAN prepare_read_item_last_curve_edmi_iec(READ_PARAMS *read_params,INT8U* frame,INT8U* frame_len);
INT8U save_sichuan_patch_curve_data(READ_PARAMS *read_params,INT8U* frame,INT8U frame_len,INT8U* buffer);
INT8U save_load_curve_data(READ_PARAMS *read_params,INT8U* data,INT8U data_num,INT8U* td);
#endif
#ifdef __HIGH_PRECISION_DATA__
void writedata_precision_cycle_day_and_curve(INT16U meter_idx,READ_WRITE_DATA *phy,INT8U td[3],INT8U *data,INT8U datalen,INT8U* buffer,INT8U *reserve_data,INT8U flag);
#endif
#endif //#ifndef __READ_METER_PREPARE_DATA_H__
